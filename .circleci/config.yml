# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1


orbs:
  artifactory-orb: jfrog/artifactory-orb@1.0.1
  aws-ecr: circleci/aws-ecr@6.15.3
  slack: circleci/slack@4.3.0

jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk       

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run build
      - run: gradle build -x test
      
      - persist_to_workspace:
          root: /home/circleci/repo
          paths:
            - build/libs/*
            
      - run: echo "Notificaciones de Slack"
      - slack/notify:
          event: fail      
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test:
    docker:
      - image: circleci/openjdk:11-jdk
      
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle test jacocoTestReport

      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit 
          
      - run: echo "Notificaciones de Slack"
      - slack/notify:
          event: fail      
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  publish-on-artifactory:
    docker:
      - image: circleci/openjdk:11-jdk

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      
      - run:
          name: Install jFrog CLI
          command: curl -fL https://getcli.jfrog.io | sh

      - run: gradle build

      - run: ./jfrog rt config --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --apikey $ARTIFACTORY_APIKEY --interactive=false

      - run: chmod +x gradlew
      
      - run: ./jfrog rt gradle-config --use-wrapper=true --repo-resolve=remote-backend-dev --server-id-resolve=Default-Server --repo-deploy=local-backend-dev --server-id-deploy=Default-Server

      - run: ./jfrog rt gradle clean build artifactoryPublish -b build.gradle
      
      - run: echo "Notificaciones de Slack"
      - slack/notify:
          event: fail      
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  
  success-notify:    
    docker:
      - image: 'cimg/base:stable'
    steps:
    
      - slack/notify:
          event: fail      
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1    
           

workflows:
  build_and_test:
    jobs:
      - build:
          filters:
            branches:
              only: /feature.*|master.*|develop/
      - test:
          requires:
            - build
          filters:
            branches:
              only: /feature.*|master.*|develop/
      - publish-on-artifactory:
          requires:
            - test
          filters:
            branches:
              only: develop
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: false
          checkout: true
          no-output-timeout: 20m
          path: .
          region: AWS_DEFAULT_REGION
          repo: '$CIRCLE_PROJECT_REPONAME'
          skip-when-tags-exist: true
          tag: '${CIRCLE_SHA1:0:7},latest'
          requires:
            - publish-on-artifactory
          filters:
            branches:
              only: develop
      - success-notify:
          requires:
            - aws-ecr/build-and-push-image
